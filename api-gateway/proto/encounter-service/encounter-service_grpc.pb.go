// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: encounter-service/encounter-service.proto

package encounter_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EncounterService_Create_FullMethodName        = "/EncounterService/Create"
	EncounterService_AddXP_FullMethodName         = "/EncounterService/AddXP"
	EncounterService_GetXPByUserId_FullMethodName = "/EncounterService/GetXPByUserId"
	EncounterService_Delete_FullMethodName        = "/EncounterService/Delete"
)

// EncounterServiceClient is the client API for EncounterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncounterServiceClient interface {
	// User Experience
	Create(ctx context.Context, in *UserExperience, opts ...grpc.CallOption) (*StatusCodeResponseEncounter, error)
	AddXP(ctx context.Context, in *AddXPRequest, opts ...grpc.CallOption) (*UserExperience, error)
	GetXPByUserId(ctx context.Context, in *GetXPByUserIdRequest, opts ...grpc.CallOption) (*UserExperience, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*StatusCodeResponseEncounter, error)
}

type encounterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEncounterServiceClient(cc grpc.ClientConnInterface) EncounterServiceClient {
	return &encounterServiceClient{cc}
}

func (c *encounterServiceClient) Create(ctx context.Context, in *UserExperience, opts ...grpc.CallOption) (*StatusCodeResponseEncounter, error) {
	out := new(StatusCodeResponseEncounter)
	err := c.cc.Invoke(ctx, EncounterService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterServiceClient) AddXP(ctx context.Context, in *AddXPRequest, opts ...grpc.CallOption) (*UserExperience, error) {
	out := new(UserExperience)
	err := c.cc.Invoke(ctx, EncounterService_AddXP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterServiceClient) GetXPByUserId(ctx context.Context, in *GetXPByUserIdRequest, opts ...grpc.CallOption) (*UserExperience, error) {
	out := new(UserExperience)
	err := c.cc.Invoke(ctx, EncounterService_GetXPByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encounterServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*StatusCodeResponseEncounter, error) {
	out := new(StatusCodeResponseEncounter)
	err := c.cc.Invoke(ctx, EncounterService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncounterServiceServer is the server API for EncounterService service.
// All implementations must embed UnimplementedEncounterServiceServer
// for forward compatibility
type EncounterServiceServer interface {
	// User Experience
	Create(context.Context, *UserExperience) (*StatusCodeResponseEncounter, error)
	AddXP(context.Context, *AddXPRequest) (*UserExperience, error)
	GetXPByUserId(context.Context, *GetXPByUserIdRequest) (*UserExperience, error)
	Delete(context.Context, *DeleteRequest) (*StatusCodeResponseEncounter, error)
	mustEmbedUnimplementedEncounterServiceServer()
}

// UnimplementedEncounterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEncounterServiceServer struct {
}

func (UnimplementedEncounterServiceServer) Create(context.Context, *UserExperience) (*StatusCodeResponseEncounter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEncounterServiceServer) AddXP(context.Context, *AddXPRequest) (*UserExperience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddXP not implemented")
}
func (UnimplementedEncounterServiceServer) GetXPByUserId(context.Context, *GetXPByUserIdRequest) (*UserExperience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXPByUserId not implemented")
}
func (UnimplementedEncounterServiceServer) Delete(context.Context, *DeleteRequest) (*StatusCodeResponseEncounter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEncounterServiceServer) mustEmbedUnimplementedEncounterServiceServer() {}

// UnsafeEncounterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncounterServiceServer will
// result in compilation errors.
type UnsafeEncounterServiceServer interface {
	mustEmbedUnimplementedEncounterServiceServer()
}

func RegisterEncounterServiceServer(s grpc.ServiceRegistrar, srv EncounterServiceServer) {
	s.RegisterService(&EncounterService_ServiceDesc, srv)
}

func _EncounterService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserExperience)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServiceServer).Create(ctx, req.(*UserExperience))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncounterService_AddXP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddXPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServiceServer).AddXP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterService_AddXP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServiceServer).AddXP(ctx, req.(*AddXPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncounterService_GetXPByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetXPByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServiceServer).GetXPByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterService_GetXPByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServiceServer).GetXPByUserId(ctx, req.(*GetXPByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncounterService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncounterServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncounterService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncounterServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EncounterService_ServiceDesc is the grpc.ServiceDesc for EncounterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EncounterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EncounterService",
	HandlerType: (*EncounterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EncounterService_Create_Handler,
		},
		{
			MethodName: "AddXP",
			Handler:    _EncounterService_AddXP_Handler,
		},
		{
			MethodName: "GetXPByUserId",
			Handler:    _EncounterService_GetXPByUserId_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EncounterService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "encounter-service/encounter-service.proto",
}
