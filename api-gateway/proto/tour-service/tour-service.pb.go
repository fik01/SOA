// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.0
// source: tour-service/tour-service.proto

package tour_service

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Tour
type TourDifficulty int32

const (
	TourDifficulty_Beginner     TourDifficulty = 0
	TourDifficulty_Intermediate TourDifficulty = 1
	TourDifficulty_Advanced     TourDifficulty = 2
	TourDifficulty_Pro          TourDifficulty = 3
)

// Enum value maps for TourDifficulty.
var (
	TourDifficulty_name = map[int32]string{
		0: "Beginner",
		1: "Intermediate",
		2: "Advanced",
		3: "Pro",
	}
	TourDifficulty_value = map[string]int32{
		"Beginner":     0,
		"Intermediate": 1,
		"Advanced":     2,
		"Pro":          3,
	}
)

func (x TourDifficulty) Enum() *TourDifficulty {
	p := new(TourDifficulty)
	*p = x
	return p
}

func (x TourDifficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TourDifficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_tour_service_tour_service_proto_enumTypes[0].Descriptor()
}

func (TourDifficulty) Type() protoreflect.EnumType {
	return &file_tour_service_tour_service_proto_enumTypes[0]
}

func (x TourDifficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TourDifficulty.Descriptor instead.
func (TourDifficulty) EnumDescriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{0}
}

type TourStatus int32

const (
	TourStatus_Draft       TourStatus = 0
	TourStatus_Published   TourStatus = 1
	TourStatus_Archived    TourStatus = 2
	TourStatus_TouristMade TourStatus = 3
)

// Enum value maps for TourStatus.
var (
	TourStatus_name = map[int32]string{
		0: "Draft",
		1: "Published",
		2: "Archived",
		3: "TouristMade",
	}
	TourStatus_value = map[string]int32{
		"Draft":       0,
		"Published":   1,
		"Archived":    2,
		"TouristMade": 3,
	}
)

func (x TourStatus) Enum() *TourStatus {
	p := new(TourStatus)
	*p = x
	return p
}

func (x TourStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TourStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tour_service_tour_service_proto_enumTypes[1].Descriptor()
}

func (TourStatus) Type() protoreflect.EnumType {
	return &file_tour_service_tour_service_proto_enumTypes[1]
}

func (x TourStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TourStatus.Descriptor instead.
func (TourStatus) EnumDescriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{1}
}

type TransportationType int32

const (
	TransportationType_Walking TransportationType = 0
	TransportationType_Bicycle TransportationType = 1
	TransportationType_Car     TransportationType = 2
)

// Enum value maps for TransportationType.
var (
	TransportationType_name = map[int32]string{
		0: "Walking",
		1: "Bicycle",
		2: "Car",
	}
	TransportationType_value = map[string]int32{
		"Walking": 0,
		"Bicycle": 1,
		"Car":     2,
	}
)

func (x TransportationType) Enum() *TransportationType {
	p := new(TransportationType)
	*p = x
	return p
}

func (x TransportationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransportationType) Descriptor() protoreflect.EnumDescriptor {
	return file_tour_service_tour_service_proto_enumTypes[2].Descriptor()
}

func (TransportationType) Type() protoreflect.EnumType {
	return &file_tour_service_tour_service_proto_enumTypes[2]
}

func (x TransportationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransportationType.Descriptor instead.
func (TransportationType) EnumDescriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{2}
}

type GetPosTouristRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TouristId int32 `protobuf:"varint,1,opt,name=touristId,proto3" json:"touristId,omitempty"`
}

func (x *GetPosTouristRequest) Reset() {
	*x = GetPosTouristRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPosTouristRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPosTouristRequest) ProtoMessage() {}

func (x *GetPosTouristRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPosTouristRequest.ProtoReflect.Descriptor instead.
func (*GetPosTouristRequest) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetPosTouristRequest) GetTouristId() int32 {
	if x != nil {
		return x.TouristId
	}
	return 0
}

type GetPosIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPosIdRequest) Reset() {
	*x = GetPosIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPosIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPosIdRequest) ProtoMessage() {}

func (x *GetPosIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPosIdRequest.ProtoReflect.Descriptor instead.
func (*GetPosIdRequest) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetPosIdRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Pos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Latitude  float64 `protobuf:"fixed64,2,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,3,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	TouristId int32   `protobuf:"varint,4,opt,name=TouristId,proto3" json:"TouristId,omitempty"`
}

func (x *Pos) Reset() {
	*x = Pos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pos) ProtoMessage() {}

func (x *Pos) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pos.ProtoReflect.Descriptor instead.
func (*Pos) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{2}
}

func (x *Pos) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Pos) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Pos) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Pos) GetTouristId() int32 {
	if x != nil {
		return x.TouristId
	}
	return 0
}

type GetEquipmentIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetEquipmentIdRequest) Reset() {
	*x = GetEquipmentIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquipmentIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquipmentIdRequest) ProtoMessage() {}

func (x *GetEquipmentIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquipmentIdRequest.ProtoReflect.Descriptor instead.
func (*GetEquipmentIdRequest) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetEquipmentIdRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteEquipmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteEquipmentRequest) Reset() {
	*x = DeleteEquipmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEquipmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEquipmentRequest) ProtoMessage() {}

func (x *DeleteEquipmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEquipmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteEquipmentRequest) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteEquipmentRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetEquipmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Equipment []*Equipment `protobuf:"bytes,1,rep,name=equipment,proto3" json:"equipment,omitempty"`
}

func (x *GetEquipmentResponse) Reset() {
	*x = GetEquipmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquipmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquipmentResponse) ProtoMessage() {}

func (x *GetEquipmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquipmentResponse.ProtoReflect.Descriptor instead.
func (*GetEquipmentResponse) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetEquipmentResponse) GetEquipment() []*Equipment {
	if x != nil {
		return x.Equipment
	}
	return nil
}

type Equipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *Equipment) Reset() {
	*x = Equipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Equipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Equipment) ProtoMessage() {}

func (x *Equipment) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Equipment.ProtoReflect.Descriptor instead.
func (*Equipment) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{6}
}

func (x *Equipment) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Equipment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Equipment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Rating
type UpdateRatingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rating *Rating `protobuf:"bytes,1,opt,name=rating,proto3" json:"rating,omitempty"`
}

func (x *UpdateRatingRequest) Reset() {
	*x = UpdateRatingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRatingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRatingRequest) ProtoMessage() {}

func (x *UpdateRatingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRatingRequest.ProtoReflect.Descriptor instead.
func (*UpdateRatingRequest) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateRatingRequest) GetRating() *Rating {
	if x != nil {
		return x.Rating
	}
	return nil
}

type GetRatingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rating []*Rating `protobuf:"bytes,1,rep,name=rating,proto3" json:"rating,omitempty"`
}

func (x *GetRatingResponse) Reset() {
	*x = GetRatingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRatingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRatingResponse) ProtoMessage() {}

func (x *GetRatingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRatingResponse.ProtoReflect.Descriptor instead.
func (*GetRatingResponse) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetRatingResponse) GetRating() []*Rating {
	if x != nil {
		return x.Rating
	}
	return nil
}

type GetRatingTourIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId int32 `protobuf:"varint,1,opt,name=tourId,proto3" json:"tourId,omitempty"`
}

func (x *GetRatingTourIdRequest) Reset() {
	*x = GetRatingTourIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRatingTourIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRatingTourIdRequest) ProtoMessage() {}

func (x *GetRatingTourIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRatingTourIdRequest.ProtoReflect.Descriptor instead.
func (*GetRatingTourIdRequest) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetRatingTourIdRequest) GetTourId() int32 {
	if x != nil {
		return x.TourId
	}
	return 0
}

type GetRatingIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRatingIdRequest) Reset() {
	*x = GetRatingIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRatingIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRatingIdRequest) ProtoMessage() {}

func (x *GetRatingIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRatingIdRequest.ProtoReflect.Descriptor instead.
func (*GetRatingIdRequest) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetRatingIdRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetRatingUserAndTourRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId   int32 `protobuf:"varint,1,opt,name=tourId,proto3" json:"tourId,omitempty"`
	PersonId int32 `protobuf:"varint,2,opt,name=personId,proto3" json:"personId,omitempty"`
}

func (x *GetRatingUserAndTourRequest) Reset() {
	*x = GetRatingUserAndTourRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRatingUserAndTourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRatingUserAndTourRequest) ProtoMessage() {}

func (x *GetRatingUserAndTourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRatingUserAndTourRequest.ProtoReflect.Descriptor instead.
func (*GetRatingUserAndTourRequest) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetRatingUserAndTourRequest) GetTourId() int32 {
	if x != nil {
		return x.TourId
	}
	return 0
}

func (x *GetRatingUserAndTourRequest) GetPersonId() int32 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

type Rating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TourId           int32                  `protobuf:"varint,2,opt,name=TourId,proto3" json:"TourId,omitempty"`
	PersonId         int32                  `protobuf:"varint,3,opt,name=PersonId,proto3" json:"PersonId,omitempty"`
	Mark             int32                  `protobuf:"varint,4,opt,name=Mark,proto3" json:"Mark,omitempty"`
	Comment          string                 `protobuf:"bytes,5,opt,name=Comment,proto3" json:"Comment,omitempty"`
	DateOfVisit      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=DateOfVisit,proto3" json:"DateOfVisit,omitempty"`
	DateOfCommenting *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=DateOfCommenting,proto3" json:"DateOfCommenting,omitempty"`
	Images           []string               `protobuf:"bytes,8,rep,name=Images,proto3" json:"Images,omitempty"`
}

func (x *Rating) Reset() {
	*x = Rating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rating) ProtoMessage() {}

func (x *Rating) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rating.ProtoReflect.Descriptor instead.
func (*Rating) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{12}
}

func (x *Rating) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Rating) GetTourId() int32 {
	if x != nil {
		return x.TourId
	}
	return 0
}

func (x *Rating) GetPersonId() int32 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *Rating) GetMark() int32 {
	if x != nil {
		return x.Mark
	}
	return 0
}

func (x *Rating) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Rating) GetDateOfVisit() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfVisit
	}
	return nil
}

func (x *Rating) GetDateOfCommenting() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfCommenting
	}
	return nil
}

func (x *Rating) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{13}
}

type StatusCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32 `protobuf:"varint,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
}

func (x *StatusCodeResponse) Reset() {
	*x = StatusCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusCodeResponse) ProtoMessage() {}

func (x *StatusCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusCodeResponse.ProtoReflect.Descriptor instead.
func (*StatusCodeResponse) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{14}
}

<<<<<<< HEAD
func (x *StatusCodeResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
=======
type Tour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Price         float64                `protobuf:"fixed64,4,opt,name=Price,proto3" json:"Price,omitempty"`
	Difficulty    TourDifficulty         `protobuf:"varint,5,opt,name=Difficulty,proto3,enum=TourDifficulty" json:"Difficulty,omitempty"`
	Tags          []string               `protobuf:"bytes,6,rep,name=Tags,proto3" json:"Tags,omitempty"`
	Equipment     []int32                `protobuf:"varint,7,rep,packed,name=Equipment,proto3" json:"Equipment,omitempty"`
	Status        TourStatus             `protobuf:"varint,8,opt,name=Status,proto3,enum=TourStatus" json:"Status,omitempty"`
	AuthorID      int32                  `protobuf:"varint,9,opt,name=AuthorID,proto3" json:"AuthorID,omitempty"`
	DistanceInKm  float64                `protobuf:"fixed64,10,opt,name=DistanceInKm,proto3" json:"DistanceInKm,omitempty"`
	ArchivedDate  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=ArchivedDate,proto3" json:"ArchivedDate,omitempty"`
	PublishedDate *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=PublishedDate,proto3" json:"PublishedDate,omitempty"`
	Image         string                 `protobuf:"bytes,13,opt,name=Image,proto3" json:"Image,omitempty"`
	KeyPoints     []*TourKeyPoint        `protobuf:"bytes,14,rep,name=KeyPoints,proto3" json:"KeyPoints,omitempty"`
	Durations     []*TourDuration        `protobuf:"bytes,15,rep,name=Durations,proto3" json:"Durations,omitempty"`
}

func (x *Tour) Reset() {
	*x = Tour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tour) ProtoMessage() {}

func (x *Tour) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tour.ProtoReflect.Descriptor instead.
func (*Tour) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{15}
}

func (x *Tour) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tour) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tour) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Tour) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Tour) GetDifficulty() TourDifficulty {
	if x != nil {
		return x.Difficulty
	}
	return TourDifficulty_Beginner
}

func (x *Tour) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Tour) GetEquipment() []int32 {
	if x != nil {
		return x.Equipment
	}
	return nil
}

func (x *Tour) GetStatus() TourStatus {
	if x != nil {
		return x.Status
	}
	return TourStatus_Draft
}

func (x *Tour) GetAuthorID() int32 {
	if x != nil {
		return x.AuthorID
	}
	return 0
}

func (x *Tour) GetDistanceInKm() float64 {
	if x != nil {
		return x.DistanceInKm
	}
	return 0
}

func (x *Tour) GetArchivedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedDate
	}
	return nil
}

func (x *Tour) GetPublishedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedDate
	}
	return nil
}

func (x *Tour) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Tour) GetKeyPoints() []*TourKeyPoint {
	if x != nil {
		return x.KeyPoints
	}
	return nil
}

func (x *Tour) GetDurations() []*TourDuration {
	if x != nil {
		return x.Durations
	}
	return nil
}

type TourKeyPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description    string  `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Longitude      float64 `protobuf:"fixed64,4,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	Latitude       float64 `protobuf:"fixed64,5,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	Image          string  `protobuf:"bytes,6,opt,name=Image,proto3" json:"Image,omitempty"`
	TourId         int32   `protobuf:"varint,7,opt,name=tourId,proto3" json:"tourId,omitempty"`
	Secret         string  `protobuf:"bytes,8,opt,name=Secret,proto3" json:"Secret,omitempty"`
	PositionInTour int32   `protobuf:"varint,9,opt,name=PositionInTour,proto3" json:"PositionInTour,omitempty"`
	PublicPointID  int32   `protobuf:"varint,10,opt,name=PublicPointID,proto3" json:"PublicPointID,omitempty"`
}

func (x *TourKeyPoint) Reset() {
	*x = TourKeyPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourKeyPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourKeyPoint) ProtoMessage() {}

func (x *TourKeyPoint) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourKeyPoint.ProtoReflect.Descriptor instead.
func (*TourKeyPoint) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{16}
}

func (x *TourKeyPoint) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TourKeyPoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TourKeyPoint) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TourKeyPoint) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *TourKeyPoint) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *TourKeyPoint) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *TourKeyPoint) GetTourId() int32 {
	if x != nil {
		return x.TourId
	}
	return 0
}

func (x *TourKeyPoint) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *TourKeyPoint) GetPositionInTour() int32 {
	if x != nil {
		return x.PositionInTour
	}
	return 0
}

func (x *TourKeyPoint) GetPublicPointID() int32 {
	if x != nil {
		return x.PublicPointID
	}
	return 0
}

type TourDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32              `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TourID         int32              `protobuf:"varint,2,opt,name=TourID,proto3" json:"TourID,omitempty"`
	TimeInSeconds  int32              `protobuf:"varint,3,opt,name=TimeInSeconds,proto3" json:"TimeInSeconds,omitempty"`
	Transportation TransportationType `protobuf:"varint,4,opt,name=transportation,proto3,enum=TransportationType" json:"transportation,omitempty"`
}

func (x *TourDuration) Reset() {
	*x = TourDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourDuration) ProtoMessage() {}

func (x *TourDuration) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourDuration.ProtoReflect.Descriptor instead.
func (*TourDuration) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{17}
}

func (x *TourDuration) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TourDuration) GetTourID() int32 {
	if x != nil {
		return x.TourID
	}
	return 0
}

func (x *TourDuration) GetTimeInSeconds() int32 {
	if x != nil {
		return x.TimeInSeconds
	}
	return 0
}

func (x *TourDuration) GetTransportation() TransportationType {
	if x != nil {
		return x.Transportation
	}
	return TransportationType_Walking
}

type GetToursResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tours []*Tour `protobuf:"bytes,1,rep,name=tours,proto3" json:"tours,omitempty"`
}

func (x *GetToursResponse) Reset() {
	*x = GetToursResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetToursResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToursResponse) ProtoMessage() {}

func (x *GetToursResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToursResponse.ProtoReflect.Descriptor instead.
func (*GetToursResponse) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetToursResponse) GetTours() []*Tour {
	if x != nil {
		return x.Tours
	}
	return nil
}

type GetAllToursRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetAllToursRequest) Reset() {
	*x = GetAllToursRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllToursRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllToursRequest) ProtoMessage() {}

func (x *GetAllToursRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllToursRequest.ProtoReflect.Descriptor instead.
func (*GetAllToursRequest) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetAllToursRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAllToursRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type PagedTourList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tours []*Tour `protobuf:"bytes,1,rep,name=tours,proto3" json:"tours,omitempty"`
	Total int32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PagedTourList) Reset() {
	*x = PagedTourList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagedTourList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagedTourList) ProtoMessage() {}

func (x *PagedTourList) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagedTourList.ProtoReflect.Descriptor instead.
func (*PagedTourList) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{20}
}

func (x *PagedTourList) GetTours() []*Tour {
	if x != nil {
		return x.Tours
	}
	return nil
}

func (x *PagedTourList) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TourRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tour *Tour `protobuf:"bytes,1,opt,name=tour,proto3" json:"tour,omitempty"`
}

func (x *TourRequest) Reset() {
	*x = TourRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourRequest) ProtoMessage() {}

func (x *TourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourRequest.ProtoReflect.Descriptor instead.
func (*TourRequest) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{21}
}

func (x *TourRequest) GetTour() *Tour {
	if x != nil {
		return x.Tour
	}
	return nil
}

type TourPaged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tours      []*Tour `protobuf:"bytes,1,rep,name=tours,proto3" json:"tours,omitempty"`
	TotalCount int32   `protobuf:"varint,2,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
}

func (x *TourPaged) Reset() {
	*x = TourPaged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourPaged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourPaged) ProtoMessage() {}

func (x *TourPaged) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourPaged.ProtoReflect.Descriptor instead.
func (*TourPaged) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{22}
}

func (x *TourPaged) GetTours() []*Tour {
	if x != nil {
		return x.Tours
	}
	return nil
}

func (x *TourPaged) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type AuthorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorId int32 `protobuf:"varint,1,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	Page     int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *AuthorRequest) Reset() {
	*x = AuthorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorRequest) ProtoMessage() {}

func (x *AuthorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorRequest.ProtoReflect.Descriptor instead.
func (*AuthorRequest) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{23}
}

func (x *AuthorRequest) GetAuthorId() int32 {
	if x != nil {
		return x.AuthorId
	}
	return 0
}

func (x *AuthorRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AuthorRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type TourKeyPointPaged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourKeyPoints []*TourKeyPoint `protobuf:"bytes,1,rep,name=tourKeyPoints,proto3" json:"tourKeyPoints,omitempty"`
	TotalCount    int32           `protobuf:"varint,2,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
}

func (x *TourKeyPointPaged) Reset() {
	*x = TourKeyPointPaged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TourKeyPointPaged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourKeyPointPaged) ProtoMessage() {}

func (x *TourKeyPointPaged) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourKeyPointPaged.ProtoReflect.Descriptor instead.
func (*TourKeyPointPaged) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{24}
}

func (x *TourKeyPointPaged) GetTourKeyPoints() []*TourKeyPoint {
	if x != nil {
		return x.TourKeyPoints
	}
	return nil
}

func (x *TourKeyPointPaged) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetTourKeyPointId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTourKeyPointId) Reset() {
	*x = GetTourKeyPointId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTourKeyPointId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTourKeyPointId) ProtoMessage() {}

func (x *GetTourKeyPointId) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTourKeyPointId.ProtoReflect.Descriptor instead.
func (*GetTourKeyPointId) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{25}
}

func (x *GetTourKeyPointId) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetTourKeyPointTourId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TourId int32 `protobuf:"varint,1,opt,name=tourId,proto3" json:"tourId,omitempty"`
}

func (x *GetTourKeyPointTourId) Reset() {
	*x = GetTourKeyPointTourId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tour_service_tour_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTourKeyPointTourId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTourKeyPointTourId) ProtoMessage() {}

func (x *GetTourKeyPointTourId) ProtoReflect() protoreflect.Message {
	mi := &file_tour_service_tour_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTourKeyPointTourId.ProtoReflect.Descriptor instead.
func (*GetTourKeyPointTourId) Descriptor() ([]byte, []int) {
	return file_tour_service_tour_service_proto_rawDescGZIP(), []int{26}
}

func (x *GetTourKeyPointTourId) GetTourId() int32 {
	if x != nil {
		return x.TourId
>>>>>>> development
	}
	return 0
}

var File_tour_service_tour_service_proto protoreflect.FileDescriptor

var file_tour_service_tour_service_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x74, 0x6f, 0x75, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74,
	0x6f, 0x75, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x34, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x54, 0x6f, 0x75, 0x72, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x75, 0x72,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x75,
	0x72, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6d, 0x0a, 0x03, 0x50, 0x6f, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f,
	0x75, 0x72, 0x69, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54,
	0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x51, 0x0a,
	0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x36, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x34, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x30,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x75, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x75, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64,
	0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x98, 0x02, 0x0a, 0x06, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x54, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x72, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x65, 0x4f, 0x66,
	0x56, 0x69, 0x73, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x44, 0x61, 0x74, 0x65,
	0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x49, 0x6d,
<<<<<<< HEAD
	0x61, 0x67, 0x65, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0xe1, 0x0a, 0x0a, 0x0b, 0x54,
	0x6f, 0x75, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x07, 0x2e, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x1a, 0x13, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73,
	0x74, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x5e, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x49, 0x64, 0x12, 0x13, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x6f, 0x75,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6f, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x75,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75,
	0x72, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2f,
	0x74, 0x6f, 0x75, 0x72, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x7d, 0x12, 0x8d, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x6f, 0x75,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x67, 0x65, 0x74, 0x42, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x2f, 0x7b, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x49, 0x64, 0x7d, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x7d, 0x12, 0x50, 0x0a,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x07, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x13, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x1a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75,
	0x72, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x5b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x0d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x5c, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0x13, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22,
	0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5c,
	0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x0a, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x13, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x1a, 0x1d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x17, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x51, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x04, 0x2e, 0x50, 0x6f, 0x73, 0x1a, 0x13, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x04, 0x2e, 0x50, 0x6f, 0x73, 0x1a,
	0x13, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x1a,
	0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x6c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x49, 0x64, 0x50,
	0x6f, 0x73, 0x12, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x54, 0x6f, 0x75, 0x72, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x04, 0x2e, 0x50, 0x6f, 0x73, 0x22,
	0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f,
	0x75, 0x72, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x49, 0x64, 0x7d, 0x12, 0x4f, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x49, 0x64, 0x50, 0x6f, 0x73, 0x12, 0x10, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x04, 0x2e, 0x50, 0x6f,
	0x73, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x14,
	0x5a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
=======
	0x61, 0x67, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9c, 0x04, 0x0a, 0x04,
	0x54, 0x6f, 0x75, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x2f, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x4b, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x4b, 0x6d, 0x12, 0x3e, 0x0a, 0x0c, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x09, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a,
	0x09, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x0c, 0x54,
	0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x54,
	0x6f, 0x75, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x54, 0x6f, 0x75, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0x99, 0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x75, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x54, 0x6f, 0x75, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3b,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x05, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x52, 0x05, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x22, 0x45, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x42, 0x0a, 0x0d, 0x50, 0x61, 0x67, 0x65, 0x64, 0x54, 0x6f, 0x75, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x52, 0x05, 0x74, 0x6f, 0x75, 0x72,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x28, 0x0a, 0x0b, 0x54, 0x6f, 0x75, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x6f, 0x75, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x52, 0x04, 0x74, 0x6f, 0x75,
	0x72, 0x22, 0x48, 0x0a, 0x09, 0x54, 0x6f, 0x75, 0x72, 0x50, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x05, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x54, 0x6f, 0x75, 0x72, 0x52, 0x05, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5d, 0x0a, 0x0d, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x68, 0x0a, 0x11, 0x54, 0x6f,
	0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x64, 0x12,
	0x33, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x4b,
	0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x75, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x2a, 0x47, 0x0a, 0x0e, 0x54, 0x6f,
	0x75, 0x72, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x0c, 0x0a, 0x08,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x72,
	0x6f, 0x10, 0x03, 0x2a, 0x45, 0x0a, 0x0a, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x72, 0x61, 0x66, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x6f, 0x75,
	0x72, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x64, 0x65, 0x10, 0x03, 0x2a, 0x37, 0x0a, 0x12, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x42, 0x69, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x61,
	0x72, 0x10, 0x02, 0x32, 0xdb, 0x0f, 0x0a, 0x0b, 0x54, 0x6f, 0x75, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x07, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x13, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x5e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x79, 0x49, 0x64, 0x12, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f,
	0x75, 0x72, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x17, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12,
	0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x6f,
	0x75, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x2f, 0x7b, 0x74,
	0x6f, 0x75, 0x72, 0x49, 0x64, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x6f, 0x75,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x07, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x44, 0x12, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74,
	0x2f, 0x74, 0x6f, 0x75, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x67, 0x65, 0x74, 0x42,
	0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72,
	0x49, 0x64, 0x2f, 0x7b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x7d, 0x2f, 0x7b, 0x74,
	0x6f, 0x75, 0x72, 0x49, 0x64, 0x7d, 0x12, 0x50, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x07, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x1a,
	0x13, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x1a,
	0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x6f,
	0x75, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x5b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5c, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x13, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74,
	0x6f, 0x75, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x13, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x1a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75,
	0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x2a, 0x22,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x51, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x12,
	0x04, 0x2e, 0x50, 0x6f, 0x73, 0x1a, 0x13, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72,
	0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x73, 0x12, 0x04, 0x2e, 0x50, 0x6f, 0x73, 0x1a, 0x13, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x1a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74,
	0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x6c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x49, 0x64, 0x50, 0x6f, 0x73, 0x12, 0x15, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x73, 0x54, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x04, 0x2e, 0x50, 0x6f, 0x73, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36,
	0x12, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x2f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x49, 0x64, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x7d, 0x12, 0x4f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x49, 0x64, 0x50,
	0x6f, 0x73, 0x12, 0x10, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x04, 0x2e, 0x50, 0x6f, 0x73, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74,
	0x2f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x4c, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x12, 0x0d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x74, 0x6f, 0x75, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x75, 0x72, 0x12, 0x05, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x1a, 0x05, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x12, 0x44, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x75, 0x72, 0x12, 0x05, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x1a, 0x05, 0x2e, 0x54, 0x6f,
	0x75, 0x72, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x1a, 0x1d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5c, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x42, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x0e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x74, 0x6f, 0x75, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x74,
	0x6f, 0x75, 0x72, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x0d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x1a,
	0x0d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x1c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x74, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x54, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x75,
	0x72, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x64, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12,
	0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x2f, 0x7b, 0x74, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x7d,
	0x12, 0x44, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x1a,
	0x05, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x49, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x0d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x1a,
	0x0d, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x1a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x74, 0x6f, 0x75, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x7b, 0x49, 0x64,
	0x7d, 0x42, 0x14, 0x5a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
>>>>>>> development
}

var (
	file_tour_service_tour_service_proto_rawDescOnce sync.Once
	file_tour_service_tour_service_proto_rawDescData = file_tour_service_tour_service_proto_rawDesc
)

func file_tour_service_tour_service_proto_rawDescGZIP() []byte {
	file_tour_service_tour_service_proto_rawDescOnce.Do(func() {
		file_tour_service_tour_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_tour_service_tour_service_proto_rawDescData)
	})
	return file_tour_service_tour_service_proto_rawDescData
}

var file_tour_service_tour_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tour_service_tour_service_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_tour_service_tour_service_proto_goTypes = []interface{}{
<<<<<<< HEAD
	(*GetPosTouristRequest)(nil),        // 0: GetPosTouristRequest
	(*GetPosIdRequest)(nil),             // 1: GetPosIdRequest
	(*Pos)(nil),                         // 2: Pos
	(*GetEquipmentIdRequest)(nil),       // 3: GetEquipmentIdRequest
	(*DeleteEquipmentRequest)(nil),      // 4: DeleteEquipmentRequest
	(*GetEquipmentResponse)(nil),        // 5: GetEquipmentResponse
	(*Equipment)(nil),                   // 6: Equipment
	(*UpdateRatingRequest)(nil),         // 7: UpdateRatingRequest
	(*GetRatingResponse)(nil),           // 8: GetRatingResponse
	(*GetRatingTourIdRequest)(nil),      // 9: GetRatingTourIdRequest
	(*GetRatingIdRequest)(nil),          // 10: GetRatingIdRequest
	(*GetRatingUserAndTourRequest)(nil), // 11: GetRatingUserAndTourRequest
	(*Rating)(nil),                      // 12: Rating
	(*EmptyRequest)(nil),                // 13: EmptyRequest
	(*StatusCodeResponse)(nil),          // 14: StatusCodeResponse
	(*timestamppb.Timestamp)(nil),       // 15: google.protobuf.Timestamp
}
var file_tour_service_tour_service_proto_depIdxs = []int32{
	6,  // 0: GetEquipmentResponse.equipment:type_name -> Equipment
	12, // 1: UpdateRatingRequest.rating:type_name -> Rating
	12, // 2: GetRatingResponse.rating:type_name -> Rating
	15, // 3: Rating.DateOfVisit:type_name -> google.protobuf.Timestamp
	15, // 4: Rating.DateOfCommenting:type_name -> google.protobuf.Timestamp
	12, // 5: TourService.CreateRating:input_type -> Rating
	10, // 6: TourService.GetRatingById:input_type -> GetRatingIdRequest
	9,  // 7: TourService.GetRatingByTourId:input_type -> GetRatingTourIdRequest
	11, // 8: TourService.GetRatingByUserAndTourId:input_type -> GetRatingUserAndTourRequest
	12, // 9: TourService.UpdateRating:input_type -> Rating
	13, // 10: TourService.GetEquipment:input_type -> EmptyRequest
	3,  // 11: TourService.GetByIdEquipment:input_type -> GetEquipmentIdRequest
	6,  // 12: TourService.CreateEquipment:input_type -> Equipment
	6,  // 13: TourService.UpdateEquipment:input_type -> Equipment
	4,  // 14: TourService.DeleteEquipment:input_type -> DeleteEquipmentRequest
	2,  // 15: TourService.CreatePos:input_type -> Pos
	2,  // 16: TourService.UpdatePos:input_type -> Pos
	0,  // 17: TourService.GetTouristIdPos:input_type -> GetPosTouristRequest
	1,  // 18: TourService.GetIdPos:input_type -> GetPosIdRequest
	14, // 19: TourService.CreateRating:output_type -> StatusCodeResponse
	8,  // 20: TourService.GetRatingById:output_type -> GetRatingResponse
	8,  // 21: TourService.GetRatingByTourId:output_type -> GetRatingResponse
	12, // 22: TourService.GetRatingByUserAndTourId:output_type -> Rating
	14, // 23: TourService.UpdateRating:output_type -> StatusCodeResponse
	5,  // 24: TourService.GetEquipment:output_type -> GetEquipmentResponse
	6,  // 25: TourService.GetByIdEquipment:output_type -> Equipment
	14, // 26: TourService.CreateEquipment:output_type -> StatusCodeResponse
	14, // 27: TourService.UpdateEquipment:output_type -> StatusCodeResponse
	14, // 28: TourService.DeleteEquipment:output_type -> StatusCodeResponse
	14, // 29: TourService.CreatePos:output_type -> StatusCodeResponse
	14, // 30: TourService.UpdatePos:output_type -> StatusCodeResponse
	2,  // 31: TourService.GetTouristIdPos:output_type -> Pos
	2,  // 32: TourService.GetIdPos:output_type -> Pos
	19, // [19:33] is the sub-list for method output_type
	5,  // [5:19] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
=======
	(TourDifficulty)(0),                 // 0: TourDifficulty
	(TourStatus)(0),                     // 1: TourStatus
	(TransportationType)(0),             // 2: TransportationType
	(*GetPosTouristRequest)(nil),        // 3: GetPosTouristRequest
	(*GetPosIdRequest)(nil),             // 4: GetPosIdRequest
	(*Pos)(nil),                         // 5: Pos
	(*GetEquipmentIdRequest)(nil),       // 6: GetEquipmentIdRequest
	(*DeleteEquipmentRequest)(nil),      // 7: DeleteEquipmentRequest
	(*GetEquipmentResponse)(nil),        // 8: GetEquipmentResponse
	(*Equipment)(nil),                   // 9: Equipment
	(*UpdateRatingRequest)(nil),         // 10: UpdateRatingRequest
	(*GetRatingResponse)(nil),           // 11: GetRatingResponse
	(*GetRatingTourIdRequest)(nil),      // 12: GetRatingTourIdRequest
	(*GetRatingIdRequest)(nil),          // 13: GetRatingIdRequest
	(*GetRatingUserAndTourRequest)(nil), // 14: GetRatingUserAndTourRequest
	(*Rating)(nil),                      // 15: Rating
	(*StatusCodeResponse)(nil),          // 16: StatusCodeResponse
	(*EmptyRequest)(nil),                // 17: EmptyRequest
	(*Tour)(nil),                        // 18: Tour
	(*TourKeyPoint)(nil),                // 19: TourKeyPoint
	(*TourDuration)(nil),                // 20: TourDuration
	(*GetToursResponse)(nil),            // 21: GetToursResponse
	(*GetAllToursRequest)(nil),          // 22: GetAllToursRequest
	(*PagedTourList)(nil),               // 23: PagedTourList
	(*TourRequest)(nil),                 // 24: TourRequest
	(*TourPaged)(nil),                   // 25: TourPaged
	(*AuthorRequest)(nil),               // 26: AuthorRequest
	(*TourKeyPointPaged)(nil),           // 27: TourKeyPointPaged
	(*GetTourKeyPointId)(nil),           // 28: GetTourKeyPointId
	(*GetTourKeyPointTourId)(nil),       // 29: GetTourKeyPointTourId
	(*timestamppb.Timestamp)(nil),       // 30: google.protobuf.Timestamp
}
var file_tour_service_tour_service_proto_depIdxs = []int32{
	9,  // 0: GetEquipmentResponse.equipment:type_name -> Equipment
	15, // 1: UpdateRatingRequest.rating:type_name -> Rating
	15, // 2: GetRatingResponse.rating:type_name -> Rating
	30, // 3: Rating.DateOfVisit:type_name -> google.protobuf.Timestamp
	30, // 4: Rating.DateOfCommenting:type_name -> google.protobuf.Timestamp
	0,  // 5: Tour.Difficulty:type_name -> TourDifficulty
	1,  // 6: Tour.Status:type_name -> TourStatus
	30, // 7: Tour.ArchivedDate:type_name -> google.protobuf.Timestamp
	30, // 8: Tour.PublishedDate:type_name -> google.protobuf.Timestamp
	19, // 9: Tour.KeyPoints:type_name -> TourKeyPoint
	20, // 10: Tour.Durations:type_name -> TourDuration
	2,  // 11: TourDuration.transportation:type_name -> TransportationType
	18, // 12: GetToursResponse.tours:type_name -> Tour
	18, // 13: PagedTourList.tours:type_name -> Tour
	18, // 14: TourRequest.tour:type_name -> Tour
	18, // 15: TourPaged.tours:type_name -> Tour
	19, // 16: TourKeyPointPaged.tourKeyPoints:type_name -> TourKeyPoint
	15, // 17: TourService.CreateRating:input_type -> Rating
	13, // 18: TourService.GetRatingById:input_type -> GetRatingIdRequest
	12, // 19: TourService.GetRatingByTourId:input_type -> GetRatingTourIdRequest
	14, // 20: TourService.GetRatingByUserAndTourId:input_type -> GetRatingUserAndTourRequest
	15, // 21: TourService.UpdateRating:input_type -> Rating
	17, // 22: TourService.GetEquipment:input_type -> EmptyRequest
	6,  // 23: TourService.GetByIdEquipment:input_type -> GetEquipmentIdRequest
	9,  // 24: TourService.CreateEquipment:input_type -> Equipment
	9,  // 25: TourService.UpdateEquipment:input_type -> Equipment
	7,  // 26: TourService.DeleteEquipment:input_type -> DeleteEquipmentRequest
	5,  // 27: TourService.CreatePos:input_type -> Pos
	5,  // 28: TourService.UpdatePos:input_type -> Pos
	3,  // 29: TourService.GetTouristIdPos:input_type -> GetPosTouristRequest
	4,  // 30: TourService.GetIdPos:input_type -> GetPosIdRequest
	17, // 31: TourService.GetAll:input_type -> EmptyRequest
	18, // 32: TourService.CreateTour:input_type -> Tour
	18, // 33: TourService.UpdateTour:input_type -> Tour
	26, // 34: TourService.GetTourByAuthorId:input_type -> AuthorRequest
	19, // 35: TourService.CreateTourKeyPoint:input_type -> TourKeyPoint
	29, // 36: TourService.GetByTourId:input_type -> GetTourKeyPointTourId
	28, // 37: TourService.GetById:input_type -> GetTourKeyPointId
	19, // 38: TourService.Update:input_type -> TourKeyPoint
	16, // 39: TourService.CreateRating:output_type -> StatusCodeResponse
	11, // 40: TourService.GetRatingById:output_type -> GetRatingResponse
	11, // 41: TourService.GetRatingByTourId:output_type -> GetRatingResponse
	15, // 42: TourService.GetRatingByUserAndTourId:output_type -> Rating
	16, // 43: TourService.UpdateRating:output_type -> StatusCodeResponse
	8,  // 44: TourService.GetEquipment:output_type -> GetEquipmentResponse
	9,  // 45: TourService.GetByIdEquipment:output_type -> Equipment
	16, // 46: TourService.CreateEquipment:output_type -> StatusCodeResponse
	16, // 47: TourService.UpdateEquipment:output_type -> StatusCodeResponse
	16, // 48: TourService.DeleteEquipment:output_type -> StatusCodeResponse
	16, // 49: TourService.CreatePos:output_type -> StatusCodeResponse
	16, // 50: TourService.UpdatePos:output_type -> StatusCodeResponse
	5,  // 51: TourService.GetTouristIdPos:output_type -> Pos
	5,  // 52: TourService.GetIdPos:output_type -> Pos
	21, // 53: TourService.GetAll:output_type -> GetToursResponse
	18, // 54: TourService.CreateTour:output_type -> Tour
	18, // 55: TourService.UpdateTour:output_type -> Tour
	23, // 56: TourService.GetTourByAuthorId:output_type -> PagedTourList
	19, // 57: TourService.CreateTourKeyPoint:output_type -> TourKeyPoint
	27, // 58: TourService.GetByTourId:output_type -> TourKeyPointPaged
	18, // 59: TourService.GetById:output_type -> Tour
	19, // 60: TourService.Update:output_type -> TourKeyPoint
	39, // [39:61] is the sub-list for method output_type
	17, // [17:39] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
>>>>>>> development
}

func init() { file_tour_service_tour_service_proto_init() }
func file_tour_service_tour_service_proto_init() {
	if File_tour_service_tour_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tour_service_tour_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPosTouristRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPosIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquipmentIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEquipmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquipmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Equipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRatingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRatingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRatingTourIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRatingIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRatingUserAndTourRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourKeyPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetToursResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllToursRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagedTourList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourPaged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TourKeyPointPaged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTourKeyPointId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tour_service_tour_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTourKeyPointTourId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tour_service_tour_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tour_service_tour_service_proto_goTypes,
		DependencyIndexes: file_tour_service_tour_service_proto_depIdxs,
		EnumInfos:         file_tour_service_tour_service_proto_enumTypes,
		MessageInfos:      file_tour_service_tour_service_proto_msgTypes,
	}.Build()
	File_tour_service_tour_service_proto = out.File
	file_tour_service_tour_service_proto_rawDesc = nil
	file_tour_service_tour_service_proto_goTypes = nil
	file_tour_service_tour_service_proto_depIdxs = nil
}
