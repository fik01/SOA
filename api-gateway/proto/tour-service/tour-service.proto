syntax = "proto3";

option go_package = "proto/tour-service";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

service TourService{

  //Rating
  rpc CreateRating(Rating) returns (StatusCodeResponse) {
    option(google.api.http) = {
      post: "/api/tourist/tourrating"
      body: "*"
    };
  }

  rpc GetRatingById(GetRatingIdRequest) returns (GetRatingResponse) {
    option(google.api.http) = {
      get: "/api/tourist/tourrating/{id}"
    };
  }

  rpc GetRatingByTourId(GetRatingTourIdRequest) returns (GetRatingResponse) {
    option(google.api.http) = {
      get: "/api/tourist/tourrating/tour/{tourId}"
    };
  }

  rpc GetRatingByUserAndTourId(GetRatingUserAndTourRequest) returns (Rating) {
    option(google.api.http) = {
      get: "/api/tourist/tourrating/getByPersonIdAndTourId/{personId}/{tourId}"
    };
  }

  rpc UpdateRating(Rating) returns (StatusCodeResponse) {
    option(google.api.http) = {
      put: "/api/tourist/tourrating"
      body: "*"
    };
  }


  //Equipment

  rpc GetEquipment(EmptyRequest) returns (GetEquipmentResponse) {
    option(google.api.http) = {
      get: "/api/administration/equipment"
    };
  }
  rpc GetByIdEquipment(GetEquipmentIdRequest) returns (Equipment) {
    option(google.api.http) = {
      get: "/api/tourManagement/equipment/{id}"
    };
  }
  rpc CreateEquipment(Equipment) returns (StatusCodeResponse) {
    option(google.api.http) = {
      post: "/api/tourManagement/equipment"
      body: "*"
    };
  }
  rpc UpdateEquipment(Equipment) returns (StatusCodeResponse) {
    option(google.api.http) = {
      put: "/api/tourManagement/equipment"
      body: "*"
    };
  }
  rpc DeleteEquipment(DeleteEquipmentRequest) returns (StatusCodeResponse) {
    option(google.api.http) = {
      delete: "/api/tourManagement/equipment/{id}"
    };
  }

  // Position simulator

  rpc CreatePos(Pos) returns (StatusCodeResponse) {
    option(google.api.http) = {
      post: "/api/tourist/positionSimulator"
      body: "*"
    };
  }
  rpc UpdatePos(Pos) returns (StatusCodeResponse) {
    option(google.api.http) = {
      put: "/api/tourist/positionSimulator"
      body: "*"
    };
  }
  rpc GetTouristIdPos(GetPosTouristRequest) returns (Pos) {
    option(google.api.http) = {
      get: "/api/tourist/positionSimulator/touristId/{touristId}"
    };
  }
  rpc GetIdPos(GetPosIdRequest) returns (Pos) {
    option(google.api.http) = {
      get: "/api/tourist/positionSimulator/{id}"
    };
  }

//Tour
  rpc GetAll(EmptyRequest) returns (GetToursResponse) {
    option(google.api.http) = {
      get: "/api/tourManagement/tour"
    };
  }  

  rpc CreateTour(Tour) returns (Tour) {
    option(google.api.http) = {
      post: "/api/tourManagement/tour"
      body: "*"
    };
  }  

  rpc UpdateTour(Tour) returns (Tour){
    option(google.api.http) = {
      put: "/api/tourManagement/tour/{id}"
      body: "*"
    };
  }
  rpc GetTourByAuthorId(AuthorRequest) returns(PagedTourList){
    option(google.api.http) = {
      get: "/api/tourManagement/tour/author"
    };
  }

  //TourKeyPoints
  rpc CreateTourKeyPoint(TourKeyPoint) returns (TourKeyPoint) {
    option(google.api.http) = {
      post: "/api/tourKeyPoint"
      body: "*"
    };
  }  

  rpc GetByTourId(GetTourKeyPointTourId) returns(TourKeyPointPaged){
    option(google.api.http) = {
      get: "/api/tourKeyPoint/tour/{tourId}"
    };
  }
  rpc GetById(GetTourKeyPointId) returns(Tour){
    option(google.api.http) = {
      get: "/api/tourKeyPoint/{id}"
    };
  }

  rpc Update(TourKeyPoint) returns (TourKeyPoint){
    option(google.api.http) = {
      put: "/api/tourKeyPoint/{Id}"
      body: "*"
    };
  }
}

// Position simulator

message GetPosTouristRequest{
  int32 touristId = 1;
}
message GetPosIdRequest{
  int32 id = 1;
}

message Pos{
  int32 Id = 1;
  double Latitude = 2;
  double Longitude = 3;
  int32 TouristId = 4;
}

//Equipment

message    GetEquipmentIdRequest{
  int32 id = 1;
}
message    DeleteEquipmentRequest{
  int32 id = 1;
}
message    GetEquipmentResponse{
  repeated Equipment equipment = 1;
}
message Equipment{
  int32 Id = 1;
  string Name = 2;
  string Description = 3;
}

//Rating
message UpdateRatingRequest {
  Rating rating = 1;
}

message GetRatingResponse{
  repeated Rating rating = 1;
}

message GetRatingTourIdRequest{
  int32 tourId = 1;
}

message GetRatingIdRequest{
  int32 id = 1;
}

message GetRatingUserAndTourRequest{
  int32 tourId = 1;
  int32 personId = 2;
}

message Rating {
  int32 Id = 1;
  int32 TourId = 2;
  int32 PersonId = 3;
  int32 Mark = 4;
  string Comment = 5;
  google.protobuf.Timestamp DateOfVisit = 6;
  google.protobuf.Timestamp DateOfCommenting = 7;
  repeated string Images = 8;
}


message EmptyRequest{
}

<<<<<<< HEAD
message StatusCodeResponse {
  int32 statusCode = 1;
=======
//Tour
enum TourDifficulty {
  Beginner = 0;
  Intermediate = 1;
  Advanced = 2;
  Pro = 3;
}

enum TourStatus {
  Draft = 0;
  Published = 1;
  Archived = 2;
  TouristMade = 3;
}

message Tour {
  int32 id = 1;
  string Name = 2;
  string Description = 3;
  double Price = 4;
  TourDifficulty Difficulty = 5;
  repeated string Tags = 6;
  repeated int32 Equipment = 7;
  TourStatus Status = 8;
  int32 AuthorID = 9;
  double DistanceInKm = 10;
  google.protobuf.Timestamp ArchivedDate = 11;
  google.protobuf.Timestamp PublishedDate = 12;
  string Image = 13;
  repeated TourKeyPoint KeyPoints = 14;
  repeated TourDuration Durations = 15;
}

message TourKeyPoint {
  int32 Id = 1;
  string Name = 2;
  string Description = 3;
  double Longitude = 4;
  double Latitude = 5;
  string Image = 6;
  int32 tourId = 7;
  string Secret = 8;
  int32 PositionInTour = 9;
  int32 PublicPointID = 10;
}

message TourDuration {
  int32 Id = 1;
  int32 TourID = 2;
  int32 TimeInSeconds = 3;
  TransportationType transportation = 4;
}

enum TransportationType {
  Walking = 0;
  Bicycle = 1;
  Car = 2;
}

message    GetToursResponse{
  repeated Tour tours = 1;
}

message GetAllToursRequest {
    int32 page = 1;
    int32 page_size = 2;
}

message PagedTourList {
    repeated Tour tours = 1;
    int32 total = 2;
}

message TourRequest {
    Tour tour = 1;
}

message TourPaged {
  repeated Tour tours = 1;
  int32 totalCount =2;
}

message AuthorRequest {
    int32 author_id = 1;
    int32 page = 2;
    int32 page_size = 3;
}

message TourKeyPointPaged {
  repeated TourKeyPoint tourKeyPoints = 1;
  int32 totalCount =2;
}

message GetTourKeyPointId {
  int32 id = 1;
}

message GetTourKeyPointTourId {
  int32 tourId = 1;
>>>>>>> development
}