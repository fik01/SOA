syntax = "proto3";

option go_package = "proto/tour-service";

import "google/protobuf/timestamp.proto";

service TourService{

  // Rating
  rpc CreateRating(Rating) returns (StatusCodeResponse) {}
  rpc UpdateRating(Rating) returns (StatusCodeResponse) {}
  rpc GetRatingById(GetRatingIdRequest) returns (GetRatingResponse) {}
  rpc GetRatingByTourId(GetRatingTourIdRequest) returns (GetRatingResponse) {}
  rpc GetRatingByUserAndTourId(GetRatingUserAndTourRequest) returns (Rating) {}

  // Equipment
  rpc GetEquipment(EmptyRequest) returns (GetEquipmentResponse) {}
  rpc GetByIdEquipment(GetEquipmentIdRequest) returns (Equipment) {}
  rpc CreateEquipment(Equipment) returns (StatusCodeResponse) {}
  rpc UpdateEquipment(Equipment) returns (StatusCodeResponse) {}
  rpc DeleteEquipment(DeleteEquipmentRequest) returns (StatusCodeResponse) {}

  // Position simulator
  rpc CreatePos(Pos) returns (StatusCodeResponse) {}
  rpc UpdatePos(Pos) returns (StatusCodeResponse) {}
  rpc GetTouristIdPos(GetPosTouristRequest) returns (Pos) {}
  rpc GetIdPos(GetPosIdRequest) returns (Pos) {}


  // Tours
  rpc CreateTour(Tour) returns (Tour){}
  rpc GetAll(EmptyRequest) returns (GetToursResponse){}
  rpc UpdateTour(Tour) returns (Tour){}
  rpc Get(EmptyRequest) returns (Tour){}
  rpc GetTourByAuthorId(AuthorRequest) returns(TourPaged){}

  //TourKeyPoints
  rpc CreateTourKeyPoint(TourKeyPoint) returns (TourKeyPoint) {  }  

  rpc GetByTourId(GetTourKeyPointTourId) returns(TourKeyPointPaged){}
  rpc GetById(GetTourKeyPointId) returns(Tour){}

  rpc Update(TourKeyPoint) returns (TourKeyPoint){}
}

// Position simulator

message GetPosTouristRequest{
  int32 touristId = 1;
}
message GetPosIdRequest{
  int32 id = 1;
}

message Pos{
  int32 Id = 1;
  double Latitude = 2;
  double Longitude = 3;
  int32 TouristId = 4;
}

// Equipment

message GetEquipmentIdRequest{
  int32 id = 1;
}
message DeleteEquipmentRequest{
  int32 id = 1;
}
message GetEquipmentResponse{
  repeated Equipment equipment = 1;
}
message Equipment{
  int32 Id = 1;
  string Name = 2;
  string Description = 3;
}

// Rating

message UpdateRatingRequest {
  Rating rating = 1;
}
message GetRatingResponse{
  repeated Rating rating = 1;
}
message GetRatingTourIdRequest{
  int32 tourId = 1;
}
message GetRatingIdRequest{
  int32 id = 1;
}
message GetRatingUserAndTourRequest{
  int32 tourId = 1;
  int32 personId = 2;
}
message Rating {
  int32 Id = 1;
  int32 TourId = 2;
  int32 PersonId = 3;
  int32 Mark = 4;
  string Comment = 5;
  google.protobuf.Timestamp DateOfVisit = 6;
  google.protobuf.Timestamp DateOfCommenting = 7;
  repeated string Images = 8;
}

// Shared
message StatusCodeResponse {
  int32 status_code = 1;
}

message EmptyRequest{
}



//Tour
enum TourDifficulty {
  Beginner = 0;
  Intermediate = 1;
  Advanced = 2;
  Pro = 3;
}

enum TourStatus {
  Draft = 0;
  Published = 1;
  Archived = 2;
  TouristMade = 3;
}

message Tour {
  int32 Id = 1;
  string Name = 2;
  string Description = 3;
  double Price = 4;
  TourDifficulty Difficulty = 5;
  repeated string Tags = 6;
  repeated int32 Equipment = 7;
  TourStatus Status = 8;
  int32 AuthorID = 9;
  double DistanceInKm = 10;
  google.protobuf.Timestamp ArchivedDate = 11;
  google.protobuf.Timestamp PublishedDate = 12;
  string Image = 13;
  repeated TourKeyPoint KeyPoints = 14;
  repeated TourDuration Durations = 15;
}

message TourKeyPoint {
  int32 Id = 1;
  string Name = 2;
  string Description = 3;
  double Longitude = 4;
  double Latitude = 5;
  string Image = 6;
  int32 tourId = 7;
  string Secret = 8;
  int32 PositionInTour = 9;
  int32 PublicPointID = 10;
}

message TourDuration {
  int32 Id = 1;
  int32 TourID = 2;
  int32 TimeInSeconds = 3;
  TransportationType transportation = 4;
}

enum TransportationType {
  Walking = 0;
  Bicycle = 1;
  Car = 2;
}

message    GetToursResponse{
  repeated Tour tours = 1;
}

message GetAllToursRequest {
    int32 page = 1;
    int32 page_size = 2;
}

message PagedTourList {
    repeated Tour tours = 1;
    int32 total = 2;
}

message TourRequest {
    Tour tour = 1;
}

message TourPaged {
  repeated Tour tours = 1;
  int32 totalCount =2;
}

message AuthorRequest {
    int32 author_id = 1;
    int32 page = 2;
    int32 page_size = 3;
}

message TourKeyPointPaged {
  repeated TourKeyPoint tourKeyPoints = 1;
  int32 totalCount =2;
}

message GetTourKeyPointId {
  int32 id = 1;
}

message GetTourKeyPointTourId {
  int32 tourId = 1;
}