// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: tour-service/tour-service.proto

package tour_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TourService_CreateRating_FullMethodName             = "/TourService/CreateRating"
	TourService_UpdateRating_FullMethodName             = "/TourService/UpdateRating"
	TourService_GetRatingById_FullMethodName            = "/TourService/GetRatingById"
	TourService_GetRatingByTourId_FullMethodName        = "/TourService/GetRatingByTourId"
	TourService_GetRatingByUserAndTourId_FullMethodName = "/TourService/GetRatingByUserAndTourId"
	TourService_GetEquipment_FullMethodName             = "/TourService/GetEquipment"
	TourService_GetByIdEquipment_FullMethodName         = "/TourService/GetByIdEquipment"
	TourService_CreateEquipment_FullMethodName          = "/TourService/CreateEquipment"
	TourService_UpdateEquipment_FullMethodName          = "/TourService/UpdateEquipment"
	TourService_DeleteEquipment_FullMethodName          = "/TourService/DeleteEquipment"
	TourService_CreatePos_FullMethodName                = "/TourService/CreatePos"
	TourService_UpdatePos_FullMethodName                = "/TourService/UpdatePos"
	TourService_GetTouristIdPos_FullMethodName          = "/TourService/GetTouristIdPos"
	TourService_GetIdPos_FullMethodName                 = "/TourService/GetIdPos"
	TourService_CreateTour_FullMethodName               = "/TourService/CreateTour"
	TourService_GetAll_FullMethodName                   = "/TourService/GetAll"
	TourService_UpdateTour_FullMethodName               = "/TourService/UpdateTour"
	TourService_Get_FullMethodName                      = "/TourService/Get"
	TourService_GetTourByAuthorId_FullMethodName        = "/TourService/GetTourByAuthorId"
	TourService_CreateTourKeyPoint_FullMethodName       = "/TourService/CreateTourKeyPoint"
	TourService_GetByTourId_FullMethodName              = "/TourService/GetByTourId"
	TourService_GetById_FullMethodName                  = "/TourService/GetById"
	TourService_Update_FullMethodName                   = "/TourService/Update"
)

// TourServiceClient is the client API for TourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TourServiceClient interface {
	// Rating
	CreateRating(ctx context.Context, in *Rating, opts ...grpc.CallOption) (*StatusCodeResponse, error)
	UpdateRating(ctx context.Context, in *Rating, opts ...grpc.CallOption) (*StatusCodeResponse, error)
	GetRatingById(ctx context.Context, in *GetRatingIdRequest, opts ...grpc.CallOption) (*GetRatingResponse, error)
	GetRatingByTourId(ctx context.Context, in *GetRatingTourIdRequest, opts ...grpc.CallOption) (*GetRatingResponse, error)
	GetRatingByUserAndTourId(ctx context.Context, in *GetRatingUserAndTourRequest, opts ...grpc.CallOption) (*Rating, error)
	// Equipment
	GetEquipment(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetEquipmentResponse, error)
	GetByIdEquipment(ctx context.Context, in *GetEquipmentIdRequest, opts ...grpc.CallOption) (*Equipment, error)
	CreateEquipment(ctx context.Context, in *Equipment, opts ...grpc.CallOption) (*StatusCodeResponse, error)
	UpdateEquipment(ctx context.Context, in *Equipment, opts ...grpc.CallOption) (*StatusCodeResponse, error)
	DeleteEquipment(ctx context.Context, in *DeleteEquipmentRequest, opts ...grpc.CallOption) (*StatusCodeResponse, error)
	// Position simulator
	CreatePos(ctx context.Context, in *Pos, opts ...grpc.CallOption) (*StatusCodeResponse, error)
	UpdatePos(ctx context.Context, in *Pos, opts ...grpc.CallOption) (*StatusCodeResponse, error)
	GetTouristIdPos(ctx context.Context, in *GetPosTouristRequest, opts ...grpc.CallOption) (*Pos, error)
	GetIdPos(ctx context.Context, in *GetPosIdRequest, opts ...grpc.CallOption) (*Pos, error)
	// Tours
	CreateTour(ctx context.Context, in *Tour, opts ...grpc.CallOption) (*Tour, error)
	GetAll(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetToursResponse, error)
	UpdateTour(ctx context.Context, in *Tour, opts ...grpc.CallOption) (*Tour, error)
	Get(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Tour, error)
	GetTourByAuthorId(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*TourPaged, error)
	// TourKeyPoints
	CreateTourKeyPoint(ctx context.Context, in *TourKeyPoint, opts ...grpc.CallOption) (*TourKeyPoint, error)
	GetByTourId(ctx context.Context, in *GetTourKeyPointTourId, opts ...grpc.CallOption) (*TourKeyPointPaged, error)
	GetById(ctx context.Context, in *GetTourKeyPointId, opts ...grpc.CallOption) (*Tour, error)
	Update(ctx context.Context, in *TourKeyPoint, opts ...grpc.CallOption) (*TourKeyPoint, error)
}

type tourServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTourServiceClient(cc grpc.ClientConnInterface) TourServiceClient {
	return &tourServiceClient{cc}
}

func (c *tourServiceClient) CreateRating(ctx context.Context, in *Rating, opts ...grpc.CallOption) (*StatusCodeResponse, error) {
	out := new(StatusCodeResponse)
	err := c.cc.Invoke(ctx, TourService_CreateRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) UpdateRating(ctx context.Context, in *Rating, opts ...grpc.CallOption) (*StatusCodeResponse, error) {
	out := new(StatusCodeResponse)
	err := c.cc.Invoke(ctx, TourService_UpdateRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetRatingById(ctx context.Context, in *GetRatingIdRequest, opts ...grpc.CallOption) (*GetRatingResponse, error) {
	out := new(GetRatingResponse)
	err := c.cc.Invoke(ctx, TourService_GetRatingById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetRatingByTourId(ctx context.Context, in *GetRatingTourIdRequest, opts ...grpc.CallOption) (*GetRatingResponse, error) {
	out := new(GetRatingResponse)
	err := c.cc.Invoke(ctx, TourService_GetRatingByTourId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetRatingByUserAndTourId(ctx context.Context, in *GetRatingUserAndTourRequest, opts ...grpc.CallOption) (*Rating, error) {
	out := new(Rating)
	err := c.cc.Invoke(ctx, TourService_GetRatingByUserAndTourId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetEquipment(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetEquipmentResponse, error) {
	out := new(GetEquipmentResponse)
	err := c.cc.Invoke(ctx, TourService_GetEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetByIdEquipment(ctx context.Context, in *GetEquipmentIdRequest, opts ...grpc.CallOption) (*Equipment, error) {
	out := new(Equipment)
	err := c.cc.Invoke(ctx, TourService_GetByIdEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) CreateEquipment(ctx context.Context, in *Equipment, opts ...grpc.CallOption) (*StatusCodeResponse, error) {
	out := new(StatusCodeResponse)
	err := c.cc.Invoke(ctx, TourService_CreateEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) UpdateEquipment(ctx context.Context, in *Equipment, opts ...grpc.CallOption) (*StatusCodeResponse, error) {
	out := new(StatusCodeResponse)
	err := c.cc.Invoke(ctx, TourService_UpdateEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) DeleteEquipment(ctx context.Context, in *DeleteEquipmentRequest, opts ...grpc.CallOption) (*StatusCodeResponse, error) {
	out := new(StatusCodeResponse)
	err := c.cc.Invoke(ctx, TourService_DeleteEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) CreatePos(ctx context.Context, in *Pos, opts ...grpc.CallOption) (*StatusCodeResponse, error) {
	out := new(StatusCodeResponse)
	err := c.cc.Invoke(ctx, TourService_CreatePos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) UpdatePos(ctx context.Context, in *Pos, opts ...grpc.CallOption) (*StatusCodeResponse, error) {
	out := new(StatusCodeResponse)
	err := c.cc.Invoke(ctx, TourService_UpdatePos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetTouristIdPos(ctx context.Context, in *GetPosTouristRequest, opts ...grpc.CallOption) (*Pos, error) {
	out := new(Pos)
	err := c.cc.Invoke(ctx, TourService_GetTouristIdPos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetIdPos(ctx context.Context, in *GetPosIdRequest, opts ...grpc.CallOption) (*Pos, error) {
	out := new(Pos)
	err := c.cc.Invoke(ctx, TourService_GetIdPos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) CreateTour(ctx context.Context, in *Tour, opts ...grpc.CallOption) (*Tour, error) {
	out := new(Tour)
	err := c.cc.Invoke(ctx, TourService_CreateTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetAll(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetToursResponse, error) {
	out := new(GetToursResponse)
	err := c.cc.Invoke(ctx, TourService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) UpdateTour(ctx context.Context, in *Tour, opts ...grpc.CallOption) (*Tour, error) {
	out := new(Tour)
	err := c.cc.Invoke(ctx, TourService_UpdateTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) Get(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Tour, error) {
	out := new(Tour)
	err := c.cc.Invoke(ctx, TourService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetTourByAuthorId(ctx context.Context, in *AuthorRequest, opts ...grpc.CallOption) (*TourPaged, error) {
	out := new(TourPaged)
	err := c.cc.Invoke(ctx, TourService_GetTourByAuthorId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) CreateTourKeyPoint(ctx context.Context, in *TourKeyPoint, opts ...grpc.CallOption) (*TourKeyPoint, error) {
	out := new(TourKeyPoint)
	err := c.cc.Invoke(ctx, TourService_CreateTourKeyPoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetByTourId(ctx context.Context, in *GetTourKeyPointTourId, opts ...grpc.CallOption) (*TourKeyPointPaged, error) {
	out := new(TourKeyPointPaged)
	err := c.cc.Invoke(ctx, TourService_GetByTourId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetById(ctx context.Context, in *GetTourKeyPointId, opts ...grpc.CallOption) (*Tour, error) {
	out := new(Tour)
	err := c.cc.Invoke(ctx, TourService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) Update(ctx context.Context, in *TourKeyPoint, opts ...grpc.CallOption) (*TourKeyPoint, error) {
	out := new(TourKeyPoint)
	err := c.cc.Invoke(ctx, TourService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourServiceServer is the server API for TourService service.
// All implementations must embed UnimplementedTourServiceServer
// for forward compatibility
type TourServiceServer interface {
	// Rating
	CreateRating(context.Context, *Rating) (*StatusCodeResponse, error)
	UpdateRating(context.Context, *Rating) (*StatusCodeResponse, error)
	GetRatingById(context.Context, *GetRatingIdRequest) (*GetRatingResponse, error)
	GetRatingByTourId(context.Context, *GetRatingTourIdRequest) (*GetRatingResponse, error)
	GetRatingByUserAndTourId(context.Context, *GetRatingUserAndTourRequest) (*Rating, error)
	// Equipment
	GetEquipment(context.Context, *EmptyRequest) (*GetEquipmentResponse, error)
	GetByIdEquipment(context.Context, *GetEquipmentIdRequest) (*Equipment, error)
	CreateEquipment(context.Context, *Equipment) (*StatusCodeResponse, error)
	UpdateEquipment(context.Context, *Equipment) (*StatusCodeResponse, error)
	DeleteEquipment(context.Context, *DeleteEquipmentRequest) (*StatusCodeResponse, error)
	// Position simulator
	CreatePos(context.Context, *Pos) (*StatusCodeResponse, error)
	UpdatePos(context.Context, *Pos) (*StatusCodeResponse, error)
	GetTouristIdPos(context.Context, *GetPosTouristRequest) (*Pos, error)
	GetIdPos(context.Context, *GetPosIdRequest) (*Pos, error)
	// Tours
	CreateTour(context.Context, *Tour) (*Tour, error)
	GetAll(context.Context, *EmptyRequest) (*GetToursResponse, error)
	UpdateTour(context.Context, *Tour) (*Tour, error)
	Get(context.Context, *EmptyRequest) (*Tour, error)
	GetTourByAuthorId(context.Context, *AuthorRequest) (*TourPaged, error)
	// TourKeyPoints
	CreateTourKeyPoint(context.Context, *TourKeyPoint) (*TourKeyPoint, error)
	GetByTourId(context.Context, *GetTourKeyPointTourId) (*TourKeyPointPaged, error)
	GetById(context.Context, *GetTourKeyPointId) (*Tour, error)
	Update(context.Context, *TourKeyPoint) (*TourKeyPoint, error)
	mustEmbedUnimplementedTourServiceServer()
}

// UnimplementedTourServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTourServiceServer struct {
}

func (UnimplementedTourServiceServer) CreateRating(context.Context, *Rating) (*StatusCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRating not implemented")
}
func (UnimplementedTourServiceServer) UpdateRating(context.Context, *Rating) (*StatusCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRating not implemented")
}
func (UnimplementedTourServiceServer) GetRatingById(context.Context, *GetRatingIdRequest) (*GetRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRatingById not implemented")
}
func (UnimplementedTourServiceServer) GetRatingByTourId(context.Context, *GetRatingTourIdRequest) (*GetRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRatingByTourId not implemented")
}
func (UnimplementedTourServiceServer) GetRatingByUserAndTourId(context.Context, *GetRatingUserAndTourRequest) (*Rating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRatingByUserAndTourId not implemented")
}
func (UnimplementedTourServiceServer) GetEquipment(context.Context, *EmptyRequest) (*GetEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquipment not implemented")
}
func (UnimplementedTourServiceServer) GetByIdEquipment(context.Context, *GetEquipmentIdRequest) (*Equipment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdEquipment not implemented")
}
func (UnimplementedTourServiceServer) CreateEquipment(context.Context, *Equipment) (*StatusCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEquipment not implemented")
}
func (UnimplementedTourServiceServer) UpdateEquipment(context.Context, *Equipment) (*StatusCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEquipment not implemented")
}
func (UnimplementedTourServiceServer) DeleteEquipment(context.Context, *DeleteEquipmentRequest) (*StatusCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEquipment not implemented")
}
func (UnimplementedTourServiceServer) CreatePos(context.Context, *Pos) (*StatusCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePos not implemented")
}
func (UnimplementedTourServiceServer) UpdatePos(context.Context, *Pos) (*StatusCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePos not implemented")
}
func (UnimplementedTourServiceServer) GetTouristIdPos(context.Context, *GetPosTouristRequest) (*Pos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTouristIdPos not implemented")
}
func (UnimplementedTourServiceServer) GetIdPos(context.Context, *GetPosIdRequest) (*Pos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdPos not implemented")
}
func (UnimplementedTourServiceServer) CreateTour(context.Context, *Tour) (*Tour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTour not implemented")
}
func (UnimplementedTourServiceServer) GetAll(context.Context, *EmptyRequest) (*GetToursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTourServiceServer) UpdateTour(context.Context, *Tour) (*Tour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTour not implemented")
}
func (UnimplementedTourServiceServer) Get(context.Context, *EmptyRequest) (*Tour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTourServiceServer) GetTourByAuthorId(context.Context, *AuthorRequest) (*TourPaged, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourByAuthorId not implemented")
}
func (UnimplementedTourServiceServer) CreateTourKeyPoint(context.Context, *TourKeyPoint) (*TourKeyPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTourKeyPoint not implemented")
}
func (UnimplementedTourServiceServer) GetByTourId(context.Context, *GetTourKeyPointTourId) (*TourKeyPointPaged, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByTourId not implemented")
}
func (UnimplementedTourServiceServer) GetById(context.Context, *GetTourKeyPointId) (*Tour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedTourServiceServer) Update(context.Context, *TourKeyPoint) (*TourKeyPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTourServiceServer) mustEmbedUnimplementedTourServiceServer() {}

// UnsafeTourServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TourServiceServer will
// result in compilation errors.
type UnsafeTourServiceServer interface {
	mustEmbedUnimplementedTourServiceServer()
}

func RegisterTourServiceServer(s grpc.ServiceRegistrar, srv TourServiceServer) {
	s.RegisterService(&TourService_ServiceDesc, srv)
}

func _TourService_CreateRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).CreateRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_CreateRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).CreateRating(ctx, req.(*Rating))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_UpdateRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).UpdateRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_UpdateRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).UpdateRating(ctx, req.(*Rating))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetRatingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetRatingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetRatingById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetRatingById(ctx, req.(*GetRatingIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetRatingByTourId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingTourIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetRatingByTourId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetRatingByTourId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetRatingByTourId(ctx, req.(*GetRatingTourIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetRatingByUserAndTourId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingUserAndTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetRatingByUserAndTourId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetRatingByUserAndTourId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetRatingByUserAndTourId(ctx, req.(*GetRatingUserAndTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetEquipment(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetByIdEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquipmentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetByIdEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetByIdEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetByIdEquipment(ctx, req.(*GetEquipmentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_CreateEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Equipment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).CreateEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_CreateEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).CreateEquipment(ctx, req.(*Equipment))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_UpdateEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Equipment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).UpdateEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_UpdateEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).UpdateEquipment(ctx, req.(*Equipment))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_DeleteEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).DeleteEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_DeleteEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).DeleteEquipment(ctx, req.(*DeleteEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_CreatePos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).CreatePos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_CreatePos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).CreatePos(ctx, req.(*Pos))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_UpdatePos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).UpdatePos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_UpdatePos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).UpdatePos(ctx, req.(*Pos))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetTouristIdPos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPosTouristRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetTouristIdPos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetTouristIdPos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetTouristIdPos(ctx, req.(*GetPosTouristRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetIdPos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPosIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetIdPos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetIdPos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetIdPos(ctx, req.(*GetPosIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_CreateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tour)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).CreateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_CreateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).CreateTour(ctx, req.(*Tour))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetAll(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_UpdateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tour)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).UpdateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_UpdateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).UpdateTour(ctx, req.(*Tour))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).Get(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetTourByAuthorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetTourByAuthorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetTourByAuthorId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetTourByAuthorId(ctx, req.(*AuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_CreateTourKeyPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourKeyPoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).CreateTourKeyPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_CreateTourKeyPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).CreateTourKeyPoint(ctx, req.(*TourKeyPoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetByTourId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTourKeyPointTourId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetByTourId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetByTourId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetByTourId(ctx, req.(*GetTourKeyPointTourId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTourKeyPointId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetById(ctx, req.(*GetTourKeyPointId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TourKeyPoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).Update(ctx, req.(*TourKeyPoint))
	}
	return interceptor(ctx, in, info, handler)
}

// TourService_ServiceDesc is the grpc.ServiceDesc for TourService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TourService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TourService",
	HandlerType: (*TourServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRating",
			Handler:    _TourService_CreateRating_Handler,
		},
		{
			MethodName: "UpdateRating",
			Handler:    _TourService_UpdateRating_Handler,
		},
		{
			MethodName: "GetRatingById",
			Handler:    _TourService_GetRatingById_Handler,
		},
		{
			MethodName: "GetRatingByTourId",
			Handler:    _TourService_GetRatingByTourId_Handler,
		},
		{
			MethodName: "GetRatingByUserAndTourId",
			Handler:    _TourService_GetRatingByUserAndTourId_Handler,
		},
		{
			MethodName: "GetEquipment",
			Handler:    _TourService_GetEquipment_Handler,
		},
		{
			MethodName: "GetByIdEquipment",
			Handler:    _TourService_GetByIdEquipment_Handler,
		},
		{
			MethodName: "CreateEquipment",
			Handler:    _TourService_CreateEquipment_Handler,
		},
		{
			MethodName: "UpdateEquipment",
			Handler:    _TourService_UpdateEquipment_Handler,
		},
		{
			MethodName: "DeleteEquipment",
			Handler:    _TourService_DeleteEquipment_Handler,
		},
		{
			MethodName: "CreatePos",
			Handler:    _TourService_CreatePos_Handler,
		},
		{
			MethodName: "UpdatePos",
			Handler:    _TourService_UpdatePos_Handler,
		},
		{
			MethodName: "GetTouristIdPos",
			Handler:    _TourService_GetTouristIdPos_Handler,
		},
		{
			MethodName: "GetIdPos",
			Handler:    _TourService_GetIdPos_Handler,
		},
		{
			MethodName: "CreateTour",
			Handler:    _TourService_CreateTour_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _TourService_GetAll_Handler,
		},
		{
			MethodName: "UpdateTour",
			Handler:    _TourService_UpdateTour_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TourService_Get_Handler,
		},
		{
			MethodName: "GetTourByAuthorId",
			Handler:    _TourService_GetTourByAuthorId_Handler,
		},
		{
			MethodName: "CreateTourKeyPoint",
			Handler:    _TourService_CreateTourKeyPoint_Handler,
		},
		{
			MethodName: "GetByTourId",
			Handler:    _TourService_GetByTourId_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _TourService_GetById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TourService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tour-service/tour-service.proto",
}
