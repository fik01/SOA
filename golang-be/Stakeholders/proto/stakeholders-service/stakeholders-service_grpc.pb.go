// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0--rc2
// source: stakeholders-service/stakeholders-service.proto

package stakeholders_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StakeholdersService_Login_FullMethodName    = "/StakeholdersService/Login"
	StakeholdersService_Register_FullMethodName = "/StakeholdersService/Register"
)

// StakeholdersServiceClient is the client API for StakeholdersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StakeholdersServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type stakeholdersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStakeholdersServiceClient(cc grpc.ClientConnInterface) StakeholdersServiceClient {
	return &stakeholdersServiceClient{cc}
}

func (c *stakeholdersServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, StakeholdersService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakeholdersServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, StakeholdersService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StakeholdersServiceServer is the server API for StakeholdersService service.
// All implementations must embed UnimplementedStakeholdersServiceServer
// for forward compatibility
type StakeholdersServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedStakeholdersServiceServer()
}

// UnimplementedStakeholdersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStakeholdersServiceServer struct {
}

func (UnimplementedStakeholdersServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedStakeholdersServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedStakeholdersServiceServer) mustEmbedUnimplementedStakeholdersServiceServer() {}

// UnsafeStakeholdersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StakeholdersServiceServer will
// result in compilation errors.
type UnsafeStakeholdersServiceServer interface {
	mustEmbedUnimplementedStakeholdersServiceServer()
}

func RegisterStakeholdersServiceServer(s grpc.ServiceRegistrar, srv StakeholdersServiceServer) {
	s.RegisterService(&StakeholdersService_ServiceDesc, srv)
}

func _StakeholdersService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakeholdersServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StakeholdersService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakeholdersServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakeholdersService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakeholdersServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StakeholdersService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakeholdersServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StakeholdersService_ServiceDesc is the grpc.ServiceDesc for StakeholdersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StakeholdersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StakeholdersService",
	HandlerType: (*StakeholdersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _StakeholdersService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _StakeholdersService_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stakeholders-service/stakeholders-service.proto",
}
