version: '3.9'

services:

  explorer:
    build:
      context: ./tourism-be/
      target: final
    networks:
      - database
    ports:
      - "44333:80"
    restart: on-failure
    environment:
      DATABASE_HOST: db
      DATABASE_PORT: 5433
      DATABASE_PASSWORD: super
      DATABASE_USER: postgres
      DATABASE_SCHEMA: explorer
      GO_TOUR_SERVICE_HOST: go-tour-service
      GO_BLOG_SERVICE_HOST: go-blog-service
      GO_ENCOUNTER_SERVICE_HOST: go-encounter-service
    depends_on:
      - db
      - go-tour-service
      - go-blog-service
      - go-encounter-service

  go-tour-service:
    build:
      context: ./golang-be/Tours/
    ports:
      - "8080:8080"
    restart: on-failure
    networks:
      - database
    depends_on:
      - db
    environment:
      - DATABASE_URL=host=db user=postgres password=super dbname=tour port=5433 sslmode=disable

  go-blog-service:
    build:
      context: ./golang-be-blogs/
    ports:
      - "8090:8090"
    restart: on-failure
    networks:
      - database
    depends_on:
      - db
    environment:
      - DATABASE_URL2=host=db user=postgres password=super dbname=blogs port=5433 sslmode=disable

      
  go-encounter-service:
    build:
      context: ./golang-be/Encounters/
    ports:
      - "8081:8081"
    restart: on-failure
    networks:
      - database
    depends_on:
      - db
    environment:
      - DATABASE_URL_1=host=db user=postgres password=super dbname=explorer port=5433 sslmode=disable

  go-follower-service:
    build:
      context: ./golang-be/Followers/
      target: final
    networks:
      - database
    ports:
      - "8082:8082" # Choose a port for the new service
    restart: on-failure
    depends_on:
      - neo4j # This ensures the Neo4j service is healthy before starting the follower service
    environment:
      NEO4J_DB: "bolt://neo4j:7687" # Neo4j database connection string
      NEO4J_USERNAME: neo4j
      NEO4J_PASS: nekaSifra

  db:
    image: postgres:latest
    restart: always
    networks:
      - database
    ports:
      - "5433:5433"
    volumes:
      - ./db_init.sh:/docker-entrypoint-initdb.d/db_init.sh
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: super
      POSTGRES_MULTIPLE_DATABASES: tour,explorer,blogs
      PGPORT: 5433
  
  neo4j:
    image: neo4j:latest
    restart: always
    networks:
      - database
    ports:
      - "7474:7474" # HTTP port for Neo4j
      - "7473:7473" # HTTPS port for Neo4j
      - "7687:7687" # Bolt protocol port for Neo4j
    healthcheck:
      test: ["CMD-SHELL", "echo RETURN 1 | cypher-shell -a bolt://neo4j:7687 -u neo4j -p nekaSifra || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      - NEO4J_AUTH=neo4j/nekaSifra
    volumes:
      - neo4j_data:/data

volumes:
  neo4j_data:
    driver: local


networks:
  database:
    name: database
    driver: bridge

